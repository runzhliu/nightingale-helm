apiVersion: v1
data:
  server.conf: |-
    # debug, release
    RunMode = "debug"

    # my cluster name
    ClusterName = "Prometheus"
    EngineDelay = 10

    [Log]
    # log write dir
    Dir = "logs"
    # log level: DEBUG INFO WARNING ERROR
    Level = "INFO"
    # stdout, stderr, file
    Output = "stdout"
    # # rotate by time
    # KeepHours: 4
    # # rotate by size
    # RotateNum = 3
    # # unit: MB
    # RotateSize = 256

    [HTTP]
    # http listening address
    Host = "0.0.0.0"
    # http listening port
    Port = 19000
    # https cert file path
    CertFile = ""
    # https key file path
    KeyFile = ""
    # whether print access log
    PrintAccessLog = false
    # whether enable pprof
    PProf = false
    # http graceful shutdown timeout, unit: s
    ShutdownTimeout = 30
    # max content length: 64M
    MaxContentLength = 67108864
    # http server read timeout, unit: s
    ReadTimeout = 20
    # http server write timeout, unit: s
    WriteTimeout = 40
    # http server idle timeout, unit: s
    IdleTimeout = 120

    # [BasicAuth]
    # user002 = "ccc26da7b9aba533cbb263a36c07dcc9"

    [Heartbeat]
    # auto detect if blank
    IP = ""
    # unit ms
    Interval = 1000

    [Alerting]
    # use builtin go code notify by default
    NotifyBuiltinEnable = true
    NotifyConcurrency = 100
    TemplatesDir = "/etc/template"
    Proxy = "{{ .Values.notify.proxy | default "http://10.9.24.190:30581" }}"

    [Alerting.CallScript]
    # built in sending capability in go code
    # so, no need enable script sender
    Enable = false
    ScriptPath = "/etc/script/notify.py"

    [Alerting.RedisPub]
    Enable = false
    # complete redis key: ${ChannelPrefix} + ${Cluster}
    ChannelPrefix = "/alerts/"

    [NoData]
    Metric = "target_up"
    # unit: second
    Interval = 15

    [Ibex]
    # callback: ${ibex}/${tplid}/${host}
    Address = "ibex:10090"
    # basic auth
    BasicAuthUser = "ibex"
    BasicAuthPass = "ibex"
    # unit: ms
    Timeout = 3000

    [Redis]
    # address, ip:port
    Address = "{{ .Values.outSideRedis.Address | default "redis:6379" }}"
    # requirepass
    Password = ""
    # # db
    # DB = 0

    [Gorm]
    # enable debug mode or not
    Debug = false
    # mysql postgres
    DBType = "mysql"
    # unit: s
    MaxLifetime = 7200
    # max open connections
    MaxOpenConns = 150
    # max idle connections
    MaxIdleConns = 50
    # table prefix
    TablePrefix = ""
    # enable auto migrate or not
    EnableAutoMigrate = false

    [MySQL]
    # mysql address host:port
    Address = "{{ .Values.outSideMysql.Address | default "mysql:3306" }}"
    # mysql username
    User = "{{ .Values.outSideMysql.User }}"
    # mysql password
    Password = "{{ .Values.outSideMysql.Pwd }}"
    # database name
    DBName = "n9e_v5"
    # connection params
    Parameters = "charset=utf8mb4&parseTime=True&loc=Local&allowNativePasswords=true"

    [Postgres]
    # pg address host:port
    Address = "postgres:5432"
    # pg user
    User = "root"
    # pg password
    Password = "1234"
    # database name
    DBName = "n9e_v5"
    # ssl mode
    SSLMode = "disable"

    [Reader]
    # prometheus base url
    Url = "{{ .Values.prometheus.url }}"
    # Basic auth username
    BasicAuthUser = ""
    # Basic auth password
    BasicAuthPass = ""
    # timeout settings, unit: ms
    Timeout = 30000
    DialTimeout = 10000
    TLSHandshakeTimeout = 30000
    ExpectContinueTimeout = 1000
    IdleConnTimeout = 90000
    # time duration, unit: ms
    KeepAlive = 30000
    MaxConnsPerHost = 0
    MaxIdleConns = 100
    MaxIdleConnsPerHost = 10

    [WriterOpt]
    # queue max size
    QueueMaxSize = 10000000
    # once pop samples number from queue
    QueuePopSize = 2000
    # unit: ms
    SleepInterval = 50

    [[Writers]]
    Url = "http://kube-prometheus-stack-prometheus.kube-prometheus-stack.svc.cluster.local:9090/api/v1/write"
    # Basic auth username
    BasicAuthUser = ""
    # Basic auth password
    BasicAuthPass = ""
    # timeout settings, unit: ms
    Timeout = 30000
    DialTimeout = 10000
    TLSHandshakeTimeout = 30000
    ExpectContinueTimeout = 1000
    IdleConnTimeout = 90000
    # time duration, unit: ms
    KeepAlive = 30000
    MaxConnsPerHost = 0
    MaxIdleConns = 100
    MaxIdleConnsPerHost = 100

  webapi.conf: |-
    # debug, release
    RunMode = "release"

    # # custom i18n dict config
    # I18N = "./etc/i18n.json"

    # do not change
    AdminRole = "Admin"

    # metrics descriptions
    MetricsYamlFile = "./etc/metrics.yaml"

    #[[NotifyChannels]]
    #Label = "邮箱"
    ## do not change Key
    #Key = "email"

    #[[NotifyChannels]]
    #Label = "钉钉机器人"
    ## do not change Key
    #Key = "dingtalk"

    [[NotifyChannels]]
    Label = "企微机器人"
    # do not change Key
    Key = "wecom"

    #[[NotifyChannels]]
    #Label = "飞书机器人"
    ## do not change Key
    #Key = "feishu"

    [[ContactKeys]]
    Label = "Wecom Robot Token"
    # do not change Key
    Key = "{{ .Values.notify.wecomToken }}"

    #[[ContactKeys]]
    #Label = "Dingtalk Robot Token"
    ## do not change Key
    #Key = "dingtalk_robot_token"

    #[[ContactKeys]]
    #Label = "Feishu Robot Token"
    ## do not change Key
    #Key = "feishu_robot_token"

    [Log]
    # log write dir
    Dir = "logs"
    # log level: DEBUG INFO WARNING ERROR
    Level = "DEBUG"
    # stdout, stderr, file
    Output = "stdout"
    # # rotate by time
    # KeepHours: 4
    # # rotate by size
    # RotateNum = 3
    # # unit: MB
    # RotateSize = 256

    [HTTP]
    # http listening address
    Host = "0.0.0.0"
    # http listening port
    Port = 18000
    # https cert file path
    CertFile = ""
    # https key file path
    KeyFile = ""
    # whether print access log
    PrintAccessLog = true
    # whether enable pprof
    PProf = false
    # http graceful shutdown timeout, unit: s
    ShutdownTimeout = 30
    # max content length: 64M
    MaxContentLength = 67108864
    # http server read timeout, unit: s
    ReadTimeout = 20
    # http server write timeout, unit: s
    WriteTimeout = 40
    # http server idle timeout, unit: s
    IdleTimeout = 120

    [JWTAuth]
    # signing key
    SigningKey = "5b94a0fd640fe2765af826acfe42d151"
    # unit: min
    AccessExpired = 1500
    # unit: min
    RefreshExpired = 10080
    RedisKeyPrefix = "/jwt/"

    [BasicAuth]
    user001 = "ccc26da7b9aba533cbb263a36c07dcc5"

    [AnonymousAccess]
    PromQuerier = false
    AlertDetail = false

    [LDAP]
    Enable = false
    Host = "ldap.example.org"
    Port = 389
    BaseDn = "dc=example,dc=org"
    # AD: manange@example.org
    BindUser = "cn=manager,dc=example,dc=org"
    BindPass = "*******"
    # openldap format e.g. (&(uid=%s))
    # AD format e.g. (&(sAMAccountName=%s))
    AuthFilter = "(&(uid=%s))"
    CoverAttributes = true
    TLS = false
    StartTLS = true

    [LDAP.Attributes]
    Nickname = "cn"
    Phone = "mobile"
    Email = "mail"

    [Redis]
    # address, ip:port
    Address = "{{ .Values.outSideRedis.Address | default "redis:6379" }}"
    # requirepass
    Password = ""
    # # db
    # DB = 0

    [Gorm]
    # enable debug mode or not
    Debug = true
    # mysql postgres
    DBType = "mysql"
    # unit: s
    MaxLifetime = 7200
    # max open connections
    MaxOpenConns = 150
    # max idle connections
    MaxIdleConns = 50
    # table prefix
    TablePrefix = ""
    # enable auto migrate or not
    EnableAutoMigrate = false

    [MySQL]
    # mysql address host:port
    Address = "{{ .Values.outSideMysql.Address | default "mysql:3306" }}"
    # mysql username
    User = "{{ .Values.outSideMysql.User }}"
    # mysql password
    Password = "{{ .Values.outSideMysql.Pwd }}"
    # database name
    DBName = "n9e_v5"
    # connection params
    Parameters = "charset=utf8mb4&parseTime=True&loc=Local&allowNativePasswords=true"

    [Postgres]
    # pg address host:port
    Address = "postgres:5432"
    # pg user
    User = "root"
    # pg password
    Password = "1234"
    # database name
    DBName = "n9e_v5"
    # ssl mode
    SSLMode = "disable"

    [[Clusters]]
    # Prometheus cluster name
    Name = "Prometheus"
    # Prometheus APIs base url
    Prom = "{{ .Values.prometheus.url }}"
    # Basic auth username
    BasicAuthUser = ""
    # Basic auth password
    BasicAuthPass = ""
    # timeout settings, unit: ms
    Timeout = 30000
    DialTimeout = 10000
    TLSHandshakeTimeout = 30000
    ExpectContinueTimeout = 1000
    IdleConnTimeout = 90000
    # time duration, unit: ms
    KeepAlive = 30000
    MaxConnsPerHost = 0
    MaxIdleConns = 100
    MaxIdleConnsPerHost = 100

    [Ibex]
    Address = "http://ibex:10090"
    # basic auth
    BasicAuthUser = "ibex"
    BasicAuthPass = "ibex"
    # unit: ms
    Timeout = 3000
kind: ConfigMap
metadata:
  name: n9e-config